variables:
  FF_TIMESTAMPS: true

stages:
- build
- lint
- test

build-job:
  stage: build
  script:
  - ENV_ID=${CI_PIPELINE_ID} docker compose build

lint-job:
  stage: lint
  before_script:
  - env | sort
  - ENV_ID=${CI_PIPELINE_ID} docker compose up -d --force-recreate
  script:
  # linting is optional in GitLab to allow for AI/LLM generated tests
  # to pass this step unconditionally
  - docker compose exec -t debian ruff check . || true
  - docker compose exec -t debian ruff format --check . || true

test-job:
  stage: test
  before_script:
  - env | sort
  - ENV_ID=${CI_PIPELINE_ID} docker compose up -d --force-recreate
  script:
  - ENV_ID=${CI_PIPELINE_ID} docker compose exec -ti debian pytest -svv --lg-env config/qemu.yaml --junit-xml=/tmp/result.xml
  - ENV_ID=${CI_PIPELINE_ID} docker compose cp debian:/tmp/result.xml result.xml
  after_script:
  - ENV_ID=${CI_PIPELINE_ID} docker compose rm -sf
  - docker network prune -f
  artifacts:
    when: always
    paths:
    - result.xml
    reports:
      junit: result.xml

